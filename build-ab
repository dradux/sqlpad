#!/bin/bash
# an autobuild build script.
#

RUNSTAMP="$(date +"%F.%H%M")"

# PARAMS (with defaults).
: ${APP_NAME:='sqlpad'}                                                 # application/component name.
: ${RUN_BUILD:='true'}                                                  # run build?
: ${IMAGE_REPO:='IMAGE-REPO-URL'}                                       # the url of the image repo (images are pushed here).
: ${IMAGE_VERSION:="a${RUNSTAMP}"}                                      # image version (tag).
: ${PUSH_IMAGE_ENABLED:='true'}                                         # push image to image repo?
: ${REPO_BRANCH:='master'}                                              # source repo branch to use for build.
: ${SOURCE_DATE:="${RUNSTAMP}"}                                         # source date (used in image labels).
: ${SOURCES_DIR:='/opt/sources'}                                        # builder sources directory.
: ${TAG_IMAGE_LATEST:='true'}                                           # add 'latest' tag to the image?
: ${VC_TAG:="isi-${RUNSTAMP}"}                                          # tag name to apply to vc.
: ${VC_TAG_COMMENT:='created with autobuild'}                           # tag comment to apply to vc.
: ${VC_TAG_ENABLED:='true'}                                             # apply the vc tag?

resulting_image_size='not available'
build_success='true'
build_result_msg='success'

image_build_performed='false'
image_push_performed='false'
image_push_latest_performed='false'
image_tag_performed='false'
image_tag_latest_performed='false'
vc_tag_performed='false'
additional_build_info=''

build_start=$(date +%s)
build_finish=''

error_msg=''
ERR_Missing_Dockerfile="ERR-001: Dockerfile not found, cannot continue."
ERR_Docker_Build_Failed="ERR-002: Docker Build failed, cannot continue."
ERR_Get_Docker_Build_Data_Failed="ERR-003: Get Docker Build Data failed, cannot continue."
ERR_Git_Checkout_Failed="ERR-100: Git Checkout failed, cannot continue."
ERR_Git_Pull_Failed="ERR-100: Git Pull failed, cannot continue."
ERR_Git_Tag_Failed="ERR-100: Git Tag failed, cannot continue."
ERR_Docker_Push_Failed="ERR-004: Docker Push failed, cannot continue."
ERR_Git_Tag_Push_Failed="ERR-005: Git Tag Push failed, cannot continue."
ERR_Missing_Build_Dockerfile="ERR-006: Build Dockerfile not found, cannot continue."
ERR_Docker_Login_Failed="ERR-007: Docker Login failed, cannot continue."


# functions
function update_source() {
  echo "Update source..."
  if [ "${error_msg}" == "" ]; then
    echo "- check out branch: ${REPO_BRANCH}"
    if [ "${RUN_BUILD}" != "false" ]; then
      git checkout ${REPO_BRANCH}
      if [ "$?" -ne 0 ]; then
        error_msg="${ERR_Git_Checkout_Failed}"; echo ${error_msg}
      fi
    fi
    echo "Update branch..."
    if [ "${RUN_BUILD}" != "false" ]; then
      git pull
      if [ "$?" -ne 0 ]; then
        error_msg="${ERR_Git_Pull_Failed}"; echo ${error_msg}
      fi
    fi
    echo "finished update source."
  else
    echo "skipped due to errors..."
  fi
}
function source_tag() {
  echo "Tag source..."
  if [ "${error_msg}" == "" ]; then
    echo "- tagging with: ${VC_TAG} (${VC_TAG_COMMENT})"
    if [ "${RUN_BUILD}" != "false" ]; then
      if [ "${VC_TAG_ENABLED}" == "true" ]; then
        git tag -a ${VC_TAG} -m "${VC_TAG_COMMENT}"
        if [ "$?" -ne 0 ]; then
          error_msg="${ERR_Git_Tag_Failed}"; echo ${error_msg}
        else
          vc_tag_performed='true'
        fi
        git push origin ${VC_TAG}
        if [ "$?" -ne 0 ]; then
          error_msg="${ERR_Git_Tag_Push_Failed}"; echo ${error_msg}
        fi
      fi
    fi
    echo "finished tag source."
  else
    echo "skipped due to errors..."
  fi
}
function build_image() {
  echo "Build image..."
  if [ "${error_msg}" == "" ]; then
    echo "- building image from ($(pwd)) with:"
    echo " * app=${APP_NAME}"
    echo " * release=${IMAGE_VERSION}"
    echo " * app.source.ref=${REPO_BRANCH}"
    echo " * app.source.version.note=${VC_TAG_COMMENT}"
    echo " * app.source.date=${SOURCE_DATE}"
    echo " * app.build.version=${RUNSTAMP}"
    echo " * app.build.img-set-id=${VC_TAG}"
    if [ "${RUN_BUILD}" != "false" ]; then
      tag_list="--tag ${IMAGE_REPO}/${APP_NAME}:${IMAGE_VERSION}"
      if [ "${TAG_IMAGE_LATEST}" == "true" ]; then
        tag_list="${tag_list} --tag ${IMAGE_REPO}/${APP_NAME}:latest"
      fi
      echo "- tag list is: ${tag_list}"
      if [ ! -f "Dockerfile" ]; then
        echo ${ERR_Missing_Dockerfile}; exit 5
      fi
      docker build \
        ${tag_list} \
        --label "app.source.ref=${REPO_BRANCH}" \
        --label "app.source.version.note=${VC_TAG_COMMENT}" \
        --label "app.source.date=${SOURCE_DATE}" \
        --label "app.build.version=${RUNSTAMP}" \
        --label "app.build.img-set-id=${VC_TAG}" \
        .
      if [ "$?" -ne 0 ]; then
        error_msg="${ERR_Docker_Build_Failed}"; echo ${error_msg}
      else
        image_build_performed='true'
        image_tag_performed='true'
        if [ "${TAG_IMAGE_LATEST}" == "true" ]; then
          image_tag_latest_performed='true'
        fi
      fi
    fi
    echo "finished build image."
  else
    echo "skipped due to errors..."
  fi
}
function push_image() {
  echo "Push image..."
  if [ "${error_msg}" == "" ]; then
    if [ "${PUSH_IMAGE_ENABLED}" == "true" ]; then
      echo "- pushing image to [repo]: ${IMAGE_REPO}"
      if [ "${RUN_BUILD}" != "false" ]; then
        echo "- logging in to image repo with user: ${PCR2_BUILDER_USER}..."
        docker login -u="${PCR2_BUILDER_USER}" -p="${PCR2_BUILDER_PWD}" ${IMAGE_REPO}
        if [ "$?" -ne 0 ]; then
          error_msg="${ERR_Docker_Push_Failed} Failing image: ${IMAGE_VERSION}"; echo ${error_msg}
        else
          #img_repo_access_check="$(curl -X GET https://${IMAGE_REPO}/v2/_catalog)"
          #echo "** image repo access check: ${img_repo_access_check}"
          echo "- pushing [image]: ${IMAGE_VERSION}..."
          docker push ${IMAGE_REPO}/${APP_NAME}:${IMAGE_VERSION}
          if [ "$?" -ne 0 ]; then
            error_msg="${ERR_Docker_Login_Failed}"; echo ${error_msg}
          else
            image_push_performed='true'
          fi
          echo "pushing [${IMAGE_VERSION}] complete"
          if [ "${TAG_IMAGE_LATEST}" == "true" ]; then
            echo '- pushing [image]: latest...'
            docker push ${IMAGE_REPO}/${APP_NAME}:latest
            if [ "$?" -ne 0 ]; then
              error_msg="${ERR_Docker_Push_Failed} Failing image: latest"; echo ${error_msg}
            else
              image_push_latest_performed='true'
            fi
            echo 'pushing latest complete'
          fi
        fi
      fi
      echo "finished push image."
    else
      echo "- pushing skipped due to PUSH_IMAGE_ENABLED flag..."
    fi
  else
    echo "skipped due to errors..."
  fi
}
function generate_response() {
  key='#AUTOBUILDER RESPONSE#'
  component="${APP_NAME}"
  image_url="${IMAGE_REPO}/${APP_NAME}:${IMAGE_VERSION}"
  image_size="$(docker images --filter=reference="${IMAGE_REPO}/${APP_NAME}:${IMAGE_VERSION}" --format "{{.Size}}")"
  runstamp="${RUNSTAMP}"
  image_set_id="${VC_TAG}"
  vc_ref="${REPO_BRANCH}"
  if [ "${error_msg}" != "" ]; then
    build_success='false'
    build_result_msg="failure: ${error_msg}"
  fi
  build_time=$((build_finish-build_start))
  # NOTICE: many of the response variables are defined/set globally.
  read -d '' response <<EOF
{
  \"component\": \"${component}\",
  \"image_url\": \"${image_url}\",
  \"image_size\": \"${image_size}\",
  \"runstamp\": \"${runstamp}\",
  \"image_set_id\": \"${image_set_id}\",
  \"vc_ref\": \"${vc_ref}\",

  \"build_success\": \"${build_success}\",
  \"build_result_msg\": \"${build_result_msg}\",

  \"image_build_performed\": \"${image_build_performed}\",
  \"image_push_performed\": \"${image_push_performed}\",
  \"image_push_latest_performed\": \"${image_push_latest_performed}\",
  \"image_tag_performed\": \"${image_tag_performed}\",
  \"image_tag_latest_performed\": \"${image_tag_latest_performed}\",
  \"vc_tag_performed\": \"${vc_tag_performed}\",
  \"additional_build_info\": \"${additional_build_info}\",

  \"build_start\": \"${build_start}\",
  \"build_finish\": \"${build_finish}\",
  \"build_time\": \"${build_time}\"
}
EOF
  # echo'ing the ${response} will send it to stdout which builder will pick up and handle.
  #   the ${key} allows builder to know the message is the response message.
  echo "${key}${response//$'\n'/}"   # note: we remove all newlines from the response string.
}

echo "Starting build..."
# build steps
update_source
source_tag
build_image
push_image
build_finish=$(date +%s)   # set the build_finish time (runtime is calculated in the function.
generate_response    # generate the special response (echo) that feeds results back to builder.
echo "Finished build."
if [ "${error_msg}" != "" ]; then
  exit 1   # signal build failure.
else
  exit 0   # signal normal/successful complete.
fi
